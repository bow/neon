// Code generated by MockGen. DO NOT EDIT.
// Source: api/neon_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=api/neon_grpc.pb.go -package=backend NeonClient
//

// Package backend is a generated GoMock package.
package backend

import (
	context "context"
	reflect "reflect"

	api "github.com/bow/neon/api"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNeonClient is a mock of NeonClient interface.
type MockNeonClient struct {
	ctrl     *gomock.Controller
	recorder *MockNeonClientMockRecorder
	isgomock struct{}
}

// MockNeonClientMockRecorder is the mock recorder for MockNeonClient.
type MockNeonClientMockRecorder struct {
	mock *MockNeonClient
}

// NewMockNeonClient creates a new mock instance.
func NewMockNeonClient(ctrl *gomock.Controller) *MockNeonClient {
	mock := &MockNeonClient{ctrl: ctrl}
	mock.recorder = &MockNeonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNeonClient) EXPECT() *MockNeonClientMockRecorder {
	return m.recorder
}

// AddFeed mocks base method.
func (m *MockNeonClient) AddFeed(ctx context.Context, in *api.AddFeedRequest, opts ...grpc.CallOption) (*api.AddFeedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFeed", varargs...)
	ret0, _ := ret[0].(*api.AddFeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeed indicates an expected call of AddFeed.
func (mr *MockNeonClientMockRecorder) AddFeed(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeed", reflect.TypeOf((*MockNeonClient)(nil).AddFeed), varargs...)
}

// DeleteFeeds mocks base method.
func (m *MockNeonClient) DeleteFeeds(ctx context.Context, in *api.DeleteFeedsRequest, opts ...grpc.CallOption) (*api.DeleteFeedsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFeeds", varargs...)
	ret0, _ := ret[0].(*api.DeleteFeedsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeeds indicates an expected call of DeleteFeeds.
func (mr *MockNeonClientMockRecorder) DeleteFeeds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeeds", reflect.TypeOf((*MockNeonClient)(nil).DeleteFeeds), varargs...)
}

// EditEntries mocks base method.
func (m *MockNeonClient) EditEntries(ctx context.Context, in *api.EditEntriesRequest, opts ...grpc.CallOption) (*api.EditEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditEntries", varargs...)
	ret0, _ := ret[0].(*api.EditEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditEntries indicates an expected call of EditEntries.
func (mr *MockNeonClientMockRecorder) EditEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEntries", reflect.TypeOf((*MockNeonClient)(nil).EditEntries), varargs...)
}

// EditFeeds mocks base method.
func (m *MockNeonClient) EditFeeds(ctx context.Context, in *api.EditFeedsRequest, opts ...grpc.CallOption) (*api.EditFeedsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditFeeds", varargs...)
	ret0, _ := ret[0].(*api.EditFeedsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditFeeds indicates an expected call of EditFeeds.
func (mr *MockNeonClientMockRecorder) EditFeeds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditFeeds", reflect.TypeOf((*MockNeonClient)(nil).EditFeeds), varargs...)
}

// ExportOPML mocks base method.
func (m *MockNeonClient) ExportOPML(ctx context.Context, in *api.ExportOPMLRequest, opts ...grpc.CallOption) (*api.ExportOPMLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportOPML", varargs...)
	ret0, _ := ret[0].(*api.ExportOPMLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportOPML indicates an expected call of ExportOPML.
func (mr *MockNeonClientMockRecorder) ExportOPML(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportOPML", reflect.TypeOf((*MockNeonClient)(nil).ExportOPML), varargs...)
}

// GetEntry mocks base method.
func (m *MockNeonClient) GetEntry(ctx context.Context, in *api.GetEntryRequest, opts ...grpc.CallOption) (*api.GetEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntry", varargs...)
	ret0, _ := ret[0].(*api.GetEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockNeonClientMockRecorder) GetEntry(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockNeonClient)(nil).GetEntry), varargs...)
}

// GetInfo mocks base method.
func (m *MockNeonClient) GetInfo(ctx context.Context, in *api.GetInfoRequest, opts ...grpc.CallOption) (*api.GetInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInfo", varargs...)
	ret0, _ := ret[0].(*api.GetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockNeonClientMockRecorder) GetInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockNeonClient)(nil).GetInfo), varargs...)
}

// GetStats mocks base method.
func (m *MockNeonClient) GetStats(ctx context.Context, in *api.GetStatsRequest, opts ...grpc.CallOption) (*api.GetStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStats", varargs...)
	ret0, _ := ret[0].(*api.GetStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockNeonClientMockRecorder) GetStats(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockNeonClient)(nil).GetStats), varargs...)
}

// ImportOPML mocks base method.
func (m *MockNeonClient) ImportOPML(ctx context.Context, in *api.ImportOPMLRequest, opts ...grpc.CallOption) (*api.ImportOPMLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportOPML", varargs...)
	ret0, _ := ret[0].(*api.ImportOPMLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportOPML indicates an expected call of ImportOPML.
func (mr *MockNeonClientMockRecorder) ImportOPML(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOPML", reflect.TypeOf((*MockNeonClient)(nil).ImportOPML), varargs...)
}

// ListEntries mocks base method.
func (m *MockNeonClient) ListEntries(ctx context.Context, in *api.ListEntriesRequest, opts ...grpc.CallOption) (*api.ListEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntries", varargs...)
	ret0, _ := ret[0].(*api.ListEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockNeonClientMockRecorder) ListEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockNeonClient)(nil).ListEntries), varargs...)
}

// ListFeeds mocks base method.
func (m *MockNeonClient) ListFeeds(ctx context.Context, in *api.ListFeedsRequest, opts ...grpc.CallOption) (*api.ListFeedsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFeeds", varargs...)
	ret0, _ := ret[0].(*api.ListFeedsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeeds indicates an expected call of ListFeeds.
func (mr *MockNeonClientMockRecorder) ListFeeds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeeds", reflect.TypeOf((*MockNeonClient)(nil).ListFeeds), varargs...)
}

// PullFeeds mocks base method.
func (m *MockNeonClient) PullFeeds(ctx context.Context, in *api.PullFeedsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[api.PullFeedsResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PullFeeds", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[api.PullFeedsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullFeeds indicates an expected call of PullFeeds.
func (mr *MockNeonClientMockRecorder) PullFeeds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullFeeds", reflect.TypeOf((*MockNeonClient)(nil).PullFeeds), varargs...)
}

// StreamEntries mocks base method.
func (m *MockNeonClient) StreamEntries(ctx context.Context, in *api.StreamEntriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[api.StreamEntriesResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamEntries", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[api.StreamEntriesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamEntries indicates an expected call of StreamEntries.
func (mr *MockNeonClientMockRecorder) StreamEntries(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEntries", reflect.TypeOf((*MockNeonClient)(nil).StreamEntries), varargs...)
}

// MockNeonServer is a mock of NeonServer interface.
type MockNeonServer struct {
	ctrl     *gomock.Controller
	recorder *MockNeonServerMockRecorder
	isgomock struct{}
}

// MockNeonServerMockRecorder is the mock recorder for MockNeonServer.
type MockNeonServerMockRecorder struct {
	mock *MockNeonServer
}

// NewMockNeonServer creates a new mock instance.
func NewMockNeonServer(ctrl *gomock.Controller) *MockNeonServer {
	mock := &MockNeonServer{ctrl: ctrl}
	mock.recorder = &MockNeonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNeonServer) EXPECT() *MockNeonServerMockRecorder {
	return m.recorder
}

// AddFeed mocks base method.
func (m *MockNeonServer) AddFeed(arg0 context.Context, arg1 *api.AddFeedRequest) (*api.AddFeedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeed", arg0, arg1)
	ret0, _ := ret[0].(*api.AddFeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeed indicates an expected call of AddFeed.
func (mr *MockNeonServerMockRecorder) AddFeed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeed", reflect.TypeOf((*MockNeonServer)(nil).AddFeed), arg0, arg1)
}

// DeleteFeeds mocks base method.
func (m *MockNeonServer) DeleteFeeds(arg0 context.Context, arg1 *api.DeleteFeedsRequest) (*api.DeleteFeedsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeeds", arg0, arg1)
	ret0, _ := ret[0].(*api.DeleteFeedsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeeds indicates an expected call of DeleteFeeds.
func (mr *MockNeonServerMockRecorder) DeleteFeeds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeeds", reflect.TypeOf((*MockNeonServer)(nil).DeleteFeeds), arg0, arg1)
}

// EditEntries mocks base method.
func (m *MockNeonServer) EditEntries(arg0 context.Context, arg1 *api.EditEntriesRequest) (*api.EditEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditEntries", arg0, arg1)
	ret0, _ := ret[0].(*api.EditEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditEntries indicates an expected call of EditEntries.
func (mr *MockNeonServerMockRecorder) EditEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEntries", reflect.TypeOf((*MockNeonServer)(nil).EditEntries), arg0, arg1)
}

// EditFeeds mocks base method.
func (m *MockNeonServer) EditFeeds(arg0 context.Context, arg1 *api.EditFeedsRequest) (*api.EditFeedsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditFeeds", arg0, arg1)
	ret0, _ := ret[0].(*api.EditFeedsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditFeeds indicates an expected call of EditFeeds.
func (mr *MockNeonServerMockRecorder) EditFeeds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditFeeds", reflect.TypeOf((*MockNeonServer)(nil).EditFeeds), arg0, arg1)
}

// ExportOPML mocks base method.
func (m *MockNeonServer) ExportOPML(arg0 context.Context, arg1 *api.ExportOPMLRequest) (*api.ExportOPMLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportOPML", arg0, arg1)
	ret0, _ := ret[0].(*api.ExportOPMLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportOPML indicates an expected call of ExportOPML.
func (mr *MockNeonServerMockRecorder) ExportOPML(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportOPML", reflect.TypeOf((*MockNeonServer)(nil).ExportOPML), arg0, arg1)
}

// GetEntry mocks base method.
func (m *MockNeonServer) GetEntry(arg0 context.Context, arg1 *api.GetEntryRequest) (*api.GetEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", arg0, arg1)
	ret0, _ := ret[0].(*api.GetEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockNeonServerMockRecorder) GetEntry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockNeonServer)(nil).GetEntry), arg0, arg1)
}

// GetInfo mocks base method.
func (m *MockNeonServer) GetInfo(arg0 context.Context, arg1 *api.GetInfoRequest) (*api.GetInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0, arg1)
	ret0, _ := ret[0].(*api.GetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockNeonServerMockRecorder) GetInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockNeonServer)(nil).GetInfo), arg0, arg1)
}

// GetStats mocks base method.
func (m *MockNeonServer) GetStats(arg0 context.Context, arg1 *api.GetStatsRequest) (*api.GetStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1)
	ret0, _ := ret[0].(*api.GetStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockNeonServerMockRecorder) GetStats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockNeonServer)(nil).GetStats), arg0, arg1)
}

// ImportOPML mocks base method.
func (m *MockNeonServer) ImportOPML(arg0 context.Context, arg1 *api.ImportOPMLRequest) (*api.ImportOPMLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportOPML", arg0, arg1)
	ret0, _ := ret[0].(*api.ImportOPMLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportOPML indicates an expected call of ImportOPML.
func (mr *MockNeonServerMockRecorder) ImportOPML(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOPML", reflect.TypeOf((*MockNeonServer)(nil).ImportOPML), arg0, arg1)
}

// ListEntries mocks base method.
func (m *MockNeonServer) ListEntries(arg0 context.Context, arg1 *api.ListEntriesRequest) (*api.ListEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", arg0, arg1)
	ret0, _ := ret[0].(*api.ListEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockNeonServerMockRecorder) ListEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockNeonServer)(nil).ListEntries), arg0, arg1)
}

// ListFeeds mocks base method.
func (m *MockNeonServer) ListFeeds(arg0 context.Context, arg1 *api.ListFeedsRequest) (*api.ListFeedsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeeds", arg0, arg1)
	ret0, _ := ret[0].(*api.ListFeedsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeeds indicates an expected call of ListFeeds.
func (mr *MockNeonServerMockRecorder) ListFeeds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeeds", reflect.TypeOf((*MockNeonServer)(nil).ListFeeds), arg0, arg1)
}

// PullFeeds mocks base method.
func (m *MockNeonServer) PullFeeds(arg0 *api.PullFeedsRequest, arg1 grpc.ServerStreamingServer[api.PullFeedsResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullFeeds", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullFeeds indicates an expected call of PullFeeds.
func (mr *MockNeonServerMockRecorder) PullFeeds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullFeeds", reflect.TypeOf((*MockNeonServer)(nil).PullFeeds), arg0, arg1)
}

// StreamEntries mocks base method.
func (m *MockNeonServer) StreamEntries(arg0 *api.StreamEntriesRequest, arg1 grpc.ServerStreamingServer[api.StreamEntriesResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamEntries", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamEntries indicates an expected call of StreamEntries.
func (mr *MockNeonServerMockRecorder) StreamEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEntries", reflect.TypeOf((*MockNeonServer)(nil).StreamEntries), arg0, arg1)
}

// mustEmbedUnimplementedNeonServer mocks base method.
func (m *MockNeonServer) mustEmbedUnimplementedNeonServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNeonServer")
}

// mustEmbedUnimplementedNeonServer indicates an expected call of mustEmbedUnimplementedNeonServer.
func (mr *MockNeonServerMockRecorder) mustEmbedUnimplementedNeonServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNeonServer", reflect.TypeOf((*MockNeonServer)(nil).mustEmbedUnimplementedNeonServer))
}

// MockUnsafeNeonServer is a mock of UnsafeNeonServer interface.
type MockUnsafeNeonServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeNeonServerMockRecorder
	isgomock struct{}
}

// MockUnsafeNeonServerMockRecorder is the mock recorder for MockUnsafeNeonServer.
type MockUnsafeNeonServerMockRecorder struct {
	mock *MockUnsafeNeonServer
}

// NewMockUnsafeNeonServer creates a new mock instance.
func NewMockUnsafeNeonServer(ctrl *gomock.Controller) *MockUnsafeNeonServer {
	mock := &MockUnsafeNeonServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeNeonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeNeonServer) EXPECT() *MockUnsafeNeonServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedNeonServer mocks base method.
func (m *MockUnsafeNeonServer) mustEmbedUnimplementedNeonServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNeonServer")
}

// mustEmbedUnimplementedNeonServer indicates an expected call of mustEmbedUnimplementedNeonServer.
func (mr *MockUnsafeNeonServerMockRecorder) mustEmbedUnimplementedNeonServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNeonServer", reflect.TypeOf((*MockUnsafeNeonServer)(nil).mustEmbedUnimplementedNeonServer))
}
