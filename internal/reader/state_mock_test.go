// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reader/state/state.go
//
// Generated by this command:
//
//	mockgen -source=internal/reader/state/state.go -package=reader State
//

// Package reader is a generated GoMock package.
package reader

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
	isgomock struct{}
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// IntroSeen mocks base method.
func (m *MockState) IntroSeen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntroSeen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IntroSeen indicates an expected call of IntroSeen.
func (mr *MockStateMockRecorder) IntroSeen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntroSeen", reflect.TypeOf((*MockState)(nil).IntroSeen))
}

// MarkIntroSeen mocks base method.
func (m *MockState) MarkIntroSeen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkIntroSeen")
}

// MarkIntroSeen indicates an expected call of MarkIntroSeen.
func (mr *MockStateMockRecorder) MarkIntroSeen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkIntroSeen", reflect.TypeOf((*MockState)(nil).MarkIntroSeen))
}
